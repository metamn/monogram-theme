// Generate a color palette
// - the lighter color should come first
// - returns a list
@function color-palette($nr-of-colors, $start, $stop) {
  $step: round(100% / ($nr-of-colors - 2) / 2);

  $return: ();
  $return: append($return, $start);
  @for $i from 1 through ($nr-of-colors - 2) {
    $return: append($return, lighten($start, $step * $i));
  }
  $return: append($return, $stop);

  @return $return;
}

// Generate random steps for a color palette to be used as a background gradient
// - metric can be px, vw, % or em
// - if no metric given a random one will be chosen
// - $granularity multiplies the size, ie making it much bigger or much smaller
@function gradient-stops($nr-of-stops, $metric: none, $granularity: 1) {
  $units: 1px, 1vw, 1vh, 1rem, 1em, 1%;
  $metric: nth($units, random(length($units)));
  $rnd: random-sizes($metric);

  @if ($metric != none) {
    $rnd: random-sizes($metric);
  }

  $metric: $metric * $granularity;

  $return: ();
  $return: append($return, 0 * $metric);
  @for $i from 1 through $nr-of-stops {
    $random: random($rnd) * $metric;
    $return: append($return, $random);
  }

  @return $return;
}

// Random sizes for a color palette
@function random-sizes($metric) {
  $rnd: 50;
  @if ($metric == 1px) {
    $rnd: 100;
  } @else if ($metric == 1%) {
    $rnd: 15;
  } @else if ($metric == 1vw) {
    $rnd: 15;
  } @else if ($metric == 1em) {
    $rnd: 37;
  } @else if ($metric == 1rem) {
    $rnd: 27;
  } @else if ($metric == 1vh) {
    $rnd: 7;
  }

  @return $rnd;
}

// Randomize a list
// - returns a list
@function randomize-list($list) {
  $return: ();
  @for $i from 1 through length($list) {
    $random: random(length($list));
    $return: append($return, nth($list, $random));
  }

  @return $return;
}
